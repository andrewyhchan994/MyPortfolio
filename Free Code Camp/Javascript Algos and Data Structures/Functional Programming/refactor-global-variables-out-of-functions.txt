Refactor Global Variables Out of Functions
So far, we have seen two distinct principles for functional programming:

Don't alter a variable or object - create new variables and objects and return them if need be from a function. Hint: using something like const newArr = arrVar, where arrVar is an array will simply create a reference to the existing variable and not a copy. So changing a value in newArr would change the value in arrVar.

Declare function parameters - any computation inside a function depends only on the arguments passed to the function, and not on any global object or variable.

Adding one to a number is not very exciting, but we can apply these principles when working with arrays or more complex objects.

-------------------------------------------------------------------------------------

// The global variable
const bookList = ["The Hound of the Baskervilles", "On The Electrodynamics of Moving Bodies", "PhilosophiÃ¦ Naturalis Principia Mathematica", "Disquisitiones Arithmeticae"];

// Change code below this line
function add (bookList, bookName) {
    let newArr = bookList;
    newArr = [...bookList, bookName]; // instead of using push(), which alters the original array, uses array notations
    console.log(newArr);
    return newArr;
    
  // Change code above this line
}

// Change code below this line
function remove (bookList, bookName) {
  const book_index = bookList.indexOf(bookName);
  let newArr1 = bookList;
  if (book_index >= 0) {
    // not sure if this is appropriate
    // I converted splice(0, book_index) to an Array.filter function
    return newArr1.filter(item => newArr1.indexOf(item)!= book_index);

    // Change code above this line
    }
}

const newBookList = add(bookList, 'A Brief History of Time');
const newerBookList = remove(bookList, 'On The Electrodynamics of Moving Bodies');
const newestBookList = remove(add(bookList, 'A Brief History of Time'), 'On The Electrodynamics of Moving Bodies');

console.log(bookList);