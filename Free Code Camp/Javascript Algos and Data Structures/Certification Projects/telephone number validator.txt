// Comments upon completion
// again using hacks -> if a regex doesn't match, calling .length on 'string'.match(regex) gives errors
	// problem in FCC console -> does not show this error, but in jsfiddle it does

// thus, i first tested the regex -> if regex.test(str) == false, then I can set the count == 0;


function telephoneCheck(str) {
  // digit counter
  let digitRegex = /\d+/g;
  let digitCount = 0;
  // if digit is 0
  if (digitRegex.test(str) == false){
     digitCount = 0;
  } else {
     let digitCount = str.match(digitRegex)
                      .join("")
                      .length;
  }
  
          

  // Check if 1 at beginning of 11 digit phone number
  if (digitCount === 11){
    if (str.match(digitRegex).join("")[0] != 1){
      return false;
    }
  } else if (digitCount > 11 || digitCount < 10){
    return false;
  }

  // check bad symbols
  let symbolRegex = /[^-()\s\d]/; //negate brackets, spaces, and digits
  if (symbolRegex.test(str) === true){
    return false;
  }

  // check format (hard part)

  // bracket checker
  let bracketForwardReg = /\(/g;
  let bracketForwardCount = str.match(bracketForwardReg)
                              .join("")
                              .length;
                        
  let bracketBackReg = /\\/g;
  let bracketBackCount = str.match(bracketBackReg)
                              .join("")
                              .length;

  if (bracketBackCount > 1){
    return false;
  } else if (bracketBackCount == 1){ // case where there is exactly 1 opening and closing bracket
    if (bracketForwardCount == 1){
      // possible combinations
      // 1 ---- ^d\s\(d{3}\)
      // 2 ---- ^d\(d{3}\)
      let regexBracketChecker = /^\d\s\(\d{3}\)|^\d\(\d{3}\)|^\(\d{3}\)/;
      if (regexBracketChecker.test(str) == false){
        return false;
      }
    } else { // ie. bracketForwardCount == 0 or > 1 AND closing bracket == 1
      return false;
    }
  } else if (bracketBackCount == 0 && bracketForwardCount != 0){
      return false;
  } 


  // Now test hyphens

  



